/* Copyright 2020 SiFive, Inc */
/* Copyright © 2020 Keith Packard */
/*
 * Licensed under the Apache License, Version 2.0 (the “License”); you
 * may not use this file except in compliance with the License. A copy
 * of this license can be found in the LICENSE.Apache2 file included
 * with this software. You may also obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
/* SPDX-License-Identifier: Apache-2.0 */

#ifndef METAL__DRIVERS__SIFIVE_UART0_H
#define METAL__DRIVERS__SIFIVE_UART0_H

{% include 'template_comment.h.j2' %}

#include <metal/interrupt.h>
#include <metal/machine/platform.h>
#include <stdint.h>

{% if 'riscv,plic0' in devices %}
{% set riscv_plic0 = devices['riscv,plic0'][0] %}

{% if devices['riscv,plic0']|length > 1 %}
#pragma warning("Multiple PLICs detected, currently Metal only supports a singleton PLIC.")
{% endif %}
#define __METAL_DT_NUM_RISCV_PLIC0S {{ riscv_plic0s|length }}

{#
   The PLIC has a claim/complete context window for each external interrupt line
   implemented for each hart. This means that for this design:

     Hart 0 - only machine external interrupt
     Hart 1 - machine and supervisor external interrupts
     hart 2 - machine and supervisor extarnal interrupts

   the PLIC will have the following memory map:

     BASE + 0x0000 - Hart 0 M mode context window
     BASE + 0x1000 - Hart 1 M mode context window
     BASE + 0x2000 - Hart 1 S mode context window
     BASE + 0x3000 - Hart 2 M mode context window
     BASE + 0x4000 - Hart 2 S mode context window

   and this will be represented in the Devicetree node for the PLIC as:

     interrupts-extended = <&hlic0 11 &hlic1 11 &hlic1 13 &hlic2 11 &hlic2 13>;

   The following template extracts the M mode context window base addresses for
   each hart.
#}
{% set num_contexts = (riscv_plic0.interrupts_extended|length) // 2 %}
{% if num_contexts == 1 %}
#define PLIC_CONTEXT_BASE(hartid) METAL_RISCV_PLIC0_CONTEXT_BASE
{% else %}
static const uintptr_t plic_context_offset[__METAL_DT_NUM_HARTS] = {
    {% for context in range(num_contexts) %}
        {% if riscv_plic0.interrupts_extended[2 * context + 1] == 11 %}
    {{ "0x%xUL" % (4092 * context) }},
        {% endif %}
    {% endfor %}
};
#define PLIC_CONTEXT_BASE(hartid) (METAL_RISCV_PLIC0_CONTEXT_BASE + plic_context_offset[hartid])
{% endif %}

{% set driver_string = to_snakecase(riscv_plic0.interrupts_extended[0].compatible[0]) %}
{% include 'interrupt_dispatch.h.j2' %}

{% endif %}

#endif
